!function a(b, c, d) {
    function e(g, h) {
        if (!c[g]) {
            if (!b[g]) {
                var i = "function" == typeof require && require;
                if (!h && i) return i(g, !0);
                if (f) return f(g, !0);
                var j = new Error("Cannot find module '" + g + "'");
                throw j.code = "MODULE_NOT_FOUND", j;
            }
            var k = c[g] = {
                exports: {}
            };
            b[g][0].call(k.exports, function(a) {
                var c = b[g][1][a];
                return e(c ? c : a);
            }, k, k.exports, a, b, c, d);
        }
        return c[g].exports;
    }
    for (var f = "function" == typeof require && require, g = 0; g < d.length; g++) e(d[g]);
    return e;
}({
    1: [ function(a, b) {
        var c = a("./global"), d = function() {
            var a = function(a) {
                var b = a || {};
                this.initialize = function() {
                    c.initGlobal();
                }, this.initialize(b);
            };
            return a;
        }();
        b.exports = d;
    }, {
        "./global": 10
    } ],
    2: [ function(a, b) {
        var c = function() {
            var a = function(a) {
                $.extend(this, a), this.initialize = function() {
                    this.transitionIn = this.generateTransition(), this.transition = this.generateInteractionEffects(), 
                    this.initialized = !1, this.$el.data("initialized", this.initialized);
                }, this.generateTransition = function() {
                    var a = this, b = new TimelineMax({
                        onStart: function() {
                            a.initialized = !0, a.$el.data("initialized", a.initialized), a.$el.css("z-index", 100 - a.order);
                        },
                        onComplete: function() {
                            a.$el.find(".accordion-content-image").addClass("blur");
                        }
                    }), c = TweenMax.fromTo(this.$el.find(".accordion-content-image"), .95, {
                        immediateRender: !0,
                        transformPerspective: 1e3,
                        y: -this.$el.height(),
                        rotationX: 45,
                        autoAlpha: 0
                    }, {
                        y: 0,
                        rotationX: 0,
                        autoAlpha: 1,
                        ease: Back.easeOut
                    }), d = TweenMax.fromTo(this.$el.find(".broken"), .95, {
                        immediateRender: !0,
                        transformPerspective: 1e3,
                        y: -this.$el.height(),
                        rotationX: 45,
                        autoAlpha: 0
                    }, {
                        y: 0,
                        rotationX: 0,
                        autoAlpha: 1,
                        ease: Back.easeOut,
                        delay: .15
                    });
                    return b.add([ c, d ]), b.paused(!0), b;
                }, this.generateInteractionEffects = function() {
                    var a = this, b = new TimelineMax({
                        data: this.$el,
                        onStart: function() {
                            this.vars.data;
                        },
                        onUpdate: function() {
                            var b = this.vars.data;
                            this.reversed() && this.progress() < 1 ? (b.css("z-index", 1001), b.find(".accordion-content-image").removeClass("fogOut"), 
                            b.find(".accordion-content-image").addClass("blur"), b.off("mousemove", a.onItemMove)) : !this.reversed() && this.progress() > 0 && (b.css("z-index", 10001), 
                            b.find(".accordion-content-image").addClass("fogOut"), b.find(".accordion-content-image").removeClass("blur"), 
                            b.on("mousemove", a.onItemMove));
                        }
                    }), c = TweenMax.fromTo(this.$el.find(".accordion-content-image"), .75, {
                        boxShadow: "0px 0px 0px 0px rgba(0,0,0,0)",
                        transformPerspective: 1e3,
                        z: 0
                    }, {
                        boxShadow: "0px 0px 20px 0px rgba(0,0,0,.75)",
                        z: 10,
                        ease: Power4.easeInOut
                    }), d = TweenMax.fromTo(this.$el.find(".broken"), .75, {
                        transformPerspective: 1e3,
                        z: 0
                    }, {
                        z: 20,
                        ease: Power4.easeInOut
                    });
                    return b.add([ c, d ]), b.paused(!0), b;
                }, this.onItemMove = function(a) {
                    var b = this.$el;
                    if (this.initialized) {
                        var c = a.clientY, d = b.offset().top - $(document).scrollTop(), e = c - d, f = b.height();
                        if (e >= 0 && f >= e) {
                            var g = e / f, h = 100 * g + "%", i = 2.5 - 5 * g;
                            TweenMax.set(b.find(".accordion-content-image"), {
                                rotationX: i
                            }), TweenMax.set(b.find(".broken"), {
                                transformOrigin: "50% " + h
                            });
                        }
                    }
                }.bind(this), this.initialize();
            };
            return a;
        }(window), d = function(a) {
            var b = function(b, d) {
                this.el = b, this.$el = $(b), this.$items = this.$el.find(".accordion-item"), this.items = [], 
                this.animations = [], this.scrollTimer = null, this.shouldCenter = !0, this.userScrolling = !0, 
                $.extend(this, d), this.transitionInComplete = this.transitionInComplete || function() {}, 
                void 0 === this.enableWidth && (this.enableWidth = 768), this.initialize = function() {
                    this.initItems();
                    var b = a.matchMedia("(min-width: " + this.enableWidth + "px)");
                    b.addListener(this.checkMediaQuery), this.checkMediaQuery(b);
                }, this.events = function(b) {
                    b ? this.$items.on("mouseenter", this.onOpen) : this.$items.off("mouseenter", this.onOpen), 
                    $(a).scroll(this.onScroll), this.onScroll(null, !0);
                }, this.onItemMove = function(a) {
                    var b = $(a.target).closest(".accordion-item");
                    if (b.data("initialized")) {
                        var c = a.clientY, d = b.offset().top - $(document).scrollTop(), e = c - d, f = b.height();
                        if (e >= 0 && f >= e) {
                            var g = e / f, h = 2.5 - 5 * g;
                            console.log(h), TweenMax.set(b.find(".accordion-content-image"), {
                                rotationX: h
                            });
                        }
                    }
                }.bind(this), this.onScroll = function(b, c) {
                    var d = 0;
                    for (var e in this.items) {
                        var f = this.items[e], g = f.$el, h = $(document).scrollTop() + a.innerHeight, i = g.offset().top + (c ? 0 : a.innerHeight / 5);
                        !f.initialized && h > i && (f.transitionIn.delay(.15 * d), f.transitionIn.play(), 
                        d++);
                    }
                }.bind(this), this.checkMediaQuery = function(a) {
                    a.matches || this.disabled ? (this.disabled = !1, this.enable()) : (this.disabled = !0, 
                    this.disable());
                }.bind(this), this.enable = function() {
                    for (var a in this.items) {
                        var b = this.items[a];
                        b.transition.pause(0), TweenMax.set(b.$el, {
                            height: 375
                        });
                    }
                    this.events(!0);
                }, this.disable = function() {
                    for (var a in this.items) {
                        var b = this.items[a];
                        b.transition.pause(0), b.transitionIn.progress(1), TweenMax.set(b.$el, {
                            height: 248
                        });
                    }
                    this.events(!1);
                }, this.initItems = function() {
                    var a = this;
                    this.$items.each(function(b, d) {
                        var e = $(d), f = new c({
                            id: e.attr("id"),
                            order: b,
                            $el: e
                        });
                        a.items.push(f);
                    });
                }, this.onOpen = function(a) {
                    var b = $(a.target).closest(".accordion-item"), c = b.attr("id");
                    console.log(this.items);
                    for (var d in this.items) {
                        var e = this.items[d];
                        c === e.id && e.initialized ? (e.transition.play(), e.open = !0) : e.open === !0 && e.initialized && (e.transition.reverse(void 0, !1), 
                        console.log(e.transition.duration()), TweenMax.to(e.$el.find(".accordion-content-image"), e.transition.duration(), {
                            rotationX: 0
                        }), e.open = !1);
                    }
                }.bind(this), this.onClose = function() {}.bind(this), this.initialize();
            };
            return b;
        }(window);
        b.exports = window.cl.Accordion = d;
    }, {} ],
    3: [ function(a, b) {
        var c = a("./videoservices"), d = a("./videopanel.js"), e = function(a) {
            var b = function(b) {
                this.collectData = function() {
                    var a = this.$el.data();
                    for (var c in a) {
                        var d = a[c], e = !1;
                        1 === d && (e = !0), d > 1 && (e = 1e3 * d), b[c] = e;
                    }
                }, this.opts = b || {}, $.extend(this, b), this.transitionInComplete = this.transitionInComplete || function() {}, 
                this.collectData(), this.peek = void 0 !== this.opts.peek ? this.opts.peek : !1, 
                this.inheritColors = !1, this.directions = void 0 !== this.opts.directions ? this.opts.directions : !1, 
                this.autoplay = void 0 !== this.opts.autoplay ? this.opts.autoplay : null, this.strap = void 0 !== this.opts.strap ? this.opts.strap : null, 
                this.info = void 0 !== this.opts.info ? this.opts.info : null, this.viewAll = void 0 !== this.opts.viewall ? this.opts.viewall : null, 
                this.autoplay = null, this.directionOpen = !0, this.peeked = !1;
                var e = [ "-webkit-", "-moz-", "-o-", "-ms-", "" ];
                this.$directionButtons = this.$el.find(".gallery-prev-next .direction"), this.$blurbs = this.$directionButtons.find(".blurb"), 
                this.$nextBlurb = this.$directionButtons.filter("#next").find(".blurb span"), this.$prevBlurb = this.$directionButtons.filter("#prev").find(".blurb span"), 
                this.$strap = this.$el.find(".gallery-info-strap"), this.$info = this.$el.find(".gallery-info-strap .info"), 
                this.$viewAll = this.$el.find(".gallery-view-all"), this.$viewAllPanel = this.$el.find(".gallery-view-all-panel"), 
                this.$wrapper = this.$el.find(".swiper-wrapper"), this.$pagination = this.$el.find(".gallery-pagination"), 
                this.totalSlides = this.$el.find(".gallery-item").length, this.viewAllThumbnails = [];
                var f = {
                    mode: "horizontal",
                    loop: this.totalSlides > 1 ? !0 : !1,
                    pagination: this.$pagination[0],
                    createPagination: this.totalSlides > 1 ? !0 : !1,
                    calculateHeight: !0,
                    paginationClickable: !0,
                    onSlideChangeEnd: function(a) {
                        console.log("slideChangeEnd"), c.pauseAll("vimeo"), c.pauseAll("youtube"), a.fixLoop(), 
                        this.peek && this.switchBlurbCopy();
                    }.bind(this),
                    onSlideChangeStart: function() {
                        this.peek && this.hideBlurbs();
                    }.bind(this)
                };
                null !== this.autoplay && this.totalSlides > 1 && (f.autoplay = this.autoplay), 
                this.swiper = a.swiper = new Swiper(this.$el[0], f), this.$el.find("[data-gallery-panel]").each(function() {
                    new d({
                        $el: $(this)
                    });
                }), this.toggleTransition = function(a) {
                    var b = a ? "transform,top,left" : "none";
                    for (var c in e) {
                        var d = e[c], f = a ? d : "";
                        this.$wrapper.css(d + "transition-property", f + b);
                    }
                }, this.switchBlurbCopy = function() {
                    var a = $(this.swiper.getSlide(this.swiper.activeIndex)).next(), b = $(this.swiper.getSlide(this.swiper.activeIndex)).prev(), c = a.find(".copy p"), d = a.find(".theme-color").css("color"), e = b.find(".copy p"), f = b.find(".theme-color").css("color");
                    this.inheritColors && (this.$directionButtons.filter("#next").css("background-color", d).find(".blurp span").css("color", d), 
                    this.$directionButtons.filter("#next").find(".blurb span").css("color", d), this.$directionButtons.filter("#prev").css("background-color", f).find(".blurp span").css("color", f), 
                    this.$directionButtons.filter("#prev").find(".blurb span").css("color", f)), this.$nextBlurb.text(c.text()), 
                    this.$prevBlurb.text(e.text());
                }, this.generateBlurbAnimation = function(a, b) {
                    if (void 0 === this["button-" + b]) {
                        var c = "next" === b ? -1 : 1;
                        this["button-" + b] = new TimelineMax();
                        var d = TweenMax.fromTo(a, .25, {
                            autoAlpha: 0
                        }, {
                            autoAlpha: 1
                        }), e = TweenMax.fromTo(a, .25, {
                            rotationY: 90 * c
                        }, {
                            rotationY: 0,
                            ease: Power4.easeInOut
                        }), f = TweenMax.fromTo(a.find(".blurb"), .25, {
                            rotationY: 90 * c
                        }, {
                            rotationY: 0,
                            ease: Power4.easeInOut
                        });
                        this["button-" + b].add(d), this["button-" + b].add([ e ]), this["button-" + b].add([ f ], "-=.15"), 
                        this["button-" + b].paused(!0);
                    }
                    return this["button-" + b];
                }, this.showBlurb = function(a) {
                    var b = a.attr("id"), c = this.generateBlurbAnimation(a, b);
                    c.play();
                }, this.hideBlurbs = function() {
                    var a = this;
                    this.$directionButtons.each(function() {
                        var b = $(this), c = b.attr("id"), d = a.generateBlurbAnimation(b, c);
                        d.reverse();
                    });
                }, this.generatePeakAnimation = function(a, b) {
                    var c = this.swiper;
                    TweenMax.to(this.swiper, .3, {
                        onStart: this.disablePeak,
                        onComplete: this.enablePeak,
                        onUpdate: function() {
                            var d = this.progress(), e = d * (a - b);
                            c.setWrapperTranslate(a + e, 0, 0);
                        }
                    });
                }, this.performPeek = function(a) {
                    var b, c;
                    switch (a) {
                      case "next":
                        this.wrapperX = this.swiper.getWrapperTranslate("x"), c = this.wrapperX + 80;
                        break;

                      case "prev":
                        this.wrapperX = this.swiper.getWrapperTranslate("x"), c = this.wrapperX - 80;
                    }
                    b = this.wrapperX, this.switchBlurbCopy(), this.generatePeakAnimation(b, c, a);
                }, this.over = function(a, b) {
                    if (!this.peeked) {
                        this.peeked = !0;
                        var c;
                        c = void 0 === a || null === a ? b : $(a.target).closest(".direction");
                        {
                            var d = c.attr("id");
                            c.find(".blurb");
                        }
                        this.swiper.stopAutoplay(), this.performPeek(d), this.showBlurb(c);
                    }
                }.bind(this), this.overDirection = function(a) {
                    var b = "next" === a.attr("id") ? -1 : 1;
                    this.directionOpen || (this.directionOpen = !0, TweenMax.fromTo(a, .25, {
                        rotationY: 90 * b
                    }, {
                        rotationY: 0,
                        ease: Power4.easeInOut
                    }));
                }.bind(this), this.outDirection = function() {
                    this.directionOpen && (this.directionOpen = !1, TweenMax.to(this.$directionButtons.filter("#next"), .25, {
                        rotationY: -90,
                        ease: Power4.easeInOut
                    }), TweenMax.to(this.$directionButtons.filter("#prev"), .25, {
                        rotationY: 90,
                        ease: Power4.easeInOut
                    }));
                }.bind(this), this.out = function() {
                    this.peek && this.hideBlurbs(), this.swiper.swipeTo(this.swiper.activeIndex - 1), 
                    this.peeked = !1;
                }.bind(this), this.swipeNext = function() {
                    this.swiper.swipeNext();
                }.bind(this), this.swipePrev = function() {
                    this.swiper.swipePrev();
                }.bind(this), this.startDrag = function() {
                    this.dragging = !0;
                }.bind(this), this.stopDrag = function() {
                    this.dragging = !1;
                }.bind(this), this.detectMousePostion = function(a) {
                    if (!this.dragging) {
                        var b = a.clientX, c = this.$el.width(), d = this.$el.offset().left, e = d + c, f = 80;
                        f > d + b ? (this.swiper.stopAutoplay(), this.over(null, this.$directionButtons.filter("#prev"))) : b > e - f ? (this.swiper.stopAutoplay(), 
                        this.over(null, this.$directionButtons.filter("#next"))) : (this.swiper.startAutoplay(), 
                        this.out());
                    }
                }.bind(this), this.detectMousePostionNoPeak = function(a) {
                    var b = a.clientX, c = this.$el.width(), d = this.$el.offset().left, e = d + c, f = 60;
                    f > b - d ? this.overDirection(this.$directionButtons.filter("#prev")) : b > e - f ? this.overDirection(this.$directionButtons.filter("#next")) : this.outDirection();
                }.bind(this), this.enablePeak = function() {
                    this.toggleTransition(!0), this.$el.on("mousemove", this.detectMousePostion), this.$el.on("mouseleave", this.out);
                }.bind(this), this.disablePeak = function() {
                    this.toggleTransition(!1), this.$el.off("mousemove", this.detectMousePostion), this.$el.off("mouseleave", this.out);
                }.bind(this), this.adjustForStrap = function() {
                    var a = this;
                    $(this.swiper.slides).each(function() {
                        var b = $(this), c = b.parent().height(), d = c - a.$strap.height();
                        b.find(".video-container").height(d);
                    });
                }.bind(this), this.peek && (this.switchBlurbCopy(), this.enablePeak(), this.$blurbs.show(), 
                this.peeked = !1, this.out()), this.directions && (TweenMax.set(this.$directionButtons, {
                    autoAlpha: 1
                }), this.$directionButtons.show(), this.$directionButtons.filter("#next").on("click", this.swipeNext), 
                this.$directionButtons.filter("#prev").on("click", this.swipePrev), this.outDirection(), 
                this.peek || (this.$el.on("mousemove", this.detectMousePostionNoPeak), this.$el.on("mouseleave", this.outDirection))), 
                this.$el.on("mousedown", this.startDrag), this.$el.on("mouseup", this.stopDrag), 
                this.strap && (this.$strap.css("background-color", "rgba(37,37,37,1)"), this.adjustForStrap(), 
                $(a).resize(this.adjustForStrap)), this.info && TweenMax.set(this.$info, {
                    autoAlpha: 1
                }), this.makeThumbActive = function() {}, this.generateThumbnailItem = function(a) {
                    var b = "", c = /category-[\w]+/i.exec(a.attr("class"));
                    void 0 !== c && (b = c[0]);
                    var d = a.attr("id"), e = a.data("index"), f = a.find(".marquee .copy h1").text(), g = a.find(".marquee .copy p").text(), h = a.find(".image").css("background-image");
                    h = h.split(","), h = h[h.length - 1];
                    var i = $("<div />");
                    i.addClass("gallery-thumb col-sm-3"), i.addClass(b), i.attr("id", d), i.data("index", e);
                    var j = $("<div />");
                    j.addClass("thumb-image"), j.css("background-image", h);
                    var k = $("<div />");
                    return k.addClass("thumb-info"), k.append($("<span />").text(f)), k.append($("<span />").text(g).addClass("title")), 
                    i.append(j, k), i;
                }, this.addViewAllItems = function() {
                    var a = this.swiper.slides, b = this.$viewAllPanel.find(".row");
                    for (var c in a) {
                        var d = $(a[c]);
                        if (!d.hasClass("swiper-slide-duplicate")) {
                            var e = this.generateThumbnailItem(d);
                            b.append(e), this.viewAllThumbnails.push(e);
                        }
                    }
                }, this.showAll = function() {
                    this.disablePeak(), this.toggleTransition(!0), this.viewAllEvents(!0), this.swiper.stopAutoplay(), 
                    TweenMax.to(this.$viewAllPanel, .5, {
                        autoAlpha: 1
                    });
                }.bind(this), this.hideAll = function() {
                    this.swiper.startAutoplay(), this.peek && this.enablePeak(), TweenMax.to(this.$viewAllPanel, .5, {
                        autoAlpha: 0
                    });
                }.bind(this), this.viewAllEvents = function(a) {
                    for (var b in this.viewAllThumbnails) {
                        var c = this.viewAllThumbnails[b];
                        a ? c.on("click", this.onViewAllItemClick) : c.off("click", this.onViewAllItemClick);
                    }
                }, this.onViewAllItemClick = function(a) {
                    var b = $(a.target).closest(".gallery-thumb"), c = b.data("index");
                    this.swiper.swipeTo(c);
                }.bind(this), this.viewAll && (this.addViewAllItems(), this.makeThumbActive(this.swiper.activeSlide), 
                TweenMax.set(this.$viewAll, {
                    autoAlpha: 1
                }), this.$viewAll.on("click", this.showAll), this.$viewAllPanel.find(".close").on("click", this.hideAll));
            };
            return b;
        }(window);
        b.exports = window.cl.Gallery = e;
    }, {
        "./videopanel.js": 7,
        "./videoservices": 9
    } ],
    4: [ function(a, b) {
        var c = function() {
            var a = function(a) {
                this.opts = a || {}, $.extend(this, a), this.transitionInComplete = this.transitionInComplete || function() {}, 
                this.$button = $(this.opts.button), this.$overlay = $(this.opts.overlay), this.$close = this.$overlay.find("#close-nav"), 
                this.$navItems = this.$overlay.find(".nav-item"), this.$affectedButtons = $(this.affectedClass), 
                this.$filterButton = $(this.filterButton), this.$filterMenu = $(this.filterMenu), 
                this.$filterItems = this.$filterMenu.find("li"), this.$closeFilter = this.$filterMenu.find("#close-filter"), 
                this.navOpen = !1, this.filterOpen = !1, this.isTouchDevice = $("html").hasClass("mobile") || $("html").hasClass("tablet") ? !0 : !1, 
                this.isMobile = $("html").hasClass("mobile"), this.activeClass = this.activeClass.split(".").join(""), 
                this.initialize = function() {
                    this.bindButtonEvents();
                }, this.bindButtonEvents = function() {
                    this.isTouchDevice ? (this.$button.on("touchend", this.handleNav), this.$close.on("touchend", this.handleNav), 
                    this.$navItems.on("touchend", this.handleNav), this.$filterButton.on("touchend", this.handleFilterButton), 
                    this.$closeFilter.on("touchend", this.handleFilterButton), this.$overlay.on("touchend", this.handleOverlay)) : (this.$button.on("click", this.handleNav), 
                    this.$close.on("click", this.handleNav), this.$navItems.on("click", this.handleNav), 
                    this.$affectedButtons.on("mouseenter", this.handleAffectedButtons), this.$affectedButtons.on("mouseleave", this.handleAffectedButtons), 
                    this.$filterButton.on("click", this.handleFilterButton), this.$closeFilter.on("click", this.handleFilterButton), 
                    this.$overlay.on("click", this.handleOverlay));
                }, this.createFilterAnimation = function() {
                    var a, b = new TimelineMax();
                    a = this.isMobile ? TweenMax.to(this.$overlay, .5, {
                        autoAlpha: 1
                    }) : TweenMax.to(this.$overlay, .5, {
                        visibility: "inherit",
                        zIndex: 1
                    });
                    var c = TweenMax.to(this.$filterMenu, .05, {
                        autoAlpha: 1
                    }), d = TweenMax.fromTo(this.$filterMenu, .75, {
                        rotationX: -90
                    }, {
                        rotationX: 0,
                        ease: Power4.easeInOut
                    }), e = TweenMax.fromTo(this.$closeFilter, .5, {
                        rotationX: 90
                    }, {
                        rotationX: 0,
                        onStart: function() {
                            TweenMax.set(this.$closeFilter, {
                                opacity: 1
                            });
                        },
                        onReverseComplete: function() {
                            TweenMax.set(this.$closeFilter, {
                                opacity: 0
                            });
                        }
                    }), f = TweenMax.staggerFromTo(this.$filterItems, .45, {
                        opacity: 0,
                        y: -20
                    }, {
                        opacity: 1,
                        y: 0,
                        ease: Power4.easeOut
                    }, .075);
                    return b.add([ a, c, d ]), b.add(f), b.add(e), b.paused(!0), b;
                }, this.createNavAnimation = function() {
                    var a = new TimelineMax(), b = TweenMax.to(this.$overlay, .25, {
                        autoAlpha: 1
                    }), c = TweenMax.fromTo(this.$close, .25, {
                        rotationY: 90
                    }, {
                        rotationY: 0,
                        delay: .2
                    }), d = TweenMax.fromTo(this.$button, .25, {
                        rotationY: 0
                    }, {
                        rotationY: -90
                    }), e = TweenMax.staggerFromTo(this.$navItems, .45, {
                        y: -40,
                        autoAlpha: 0
                    }, {
                        y: 0,
                        autoAlpha: 1,
                        ease: Power4.easeOut
                    }, .075);
                    return a.add([ b, d, c ]), a.add(e), a.paused(!0), a;
                }, this.navAnimation = this.createNavAnimation(), this.filterMenuAnimation = this.createFilterAnimation(), 
                this.closeNav = function() {
                    this.navAnimation.timeScale(2), this.navAnimation.reverse();
                }, this.openNav = function() {
                    if (this.navAnimation.timeScale(1), this.filterOpen) {
                        this.handleFilterButton();
                        var a = this;
                        setTimeout(function() {
                            a.navAnimation.play();
                        }, 1e3);
                    } else this.navAnimation.play();
                }, this.closeFilter = function() {
                    this.filterMenuAnimation.timeScale(2), this.filterMenuAnimation.reverse();
                }, this.openFilter = function() {
                    this.filterMenuAnimation.timeScale(1), this.filterMenuAnimation.play();
                }, this.handleFilterButton = function(a) {
                    void 0 !== a && a.stopPropagation(), this.filterOpen ? (this.filterOpen = !1, this.closeFilter()) : (this.filterOpen = !0, 
                    this.openFilter());
                }.bind(this), this.handleAffectedButtons = function(a) {
                    var b = $(a.target).closest(this.affectedClass);
                    b.toggleClass(this.activeClass);
                }.bind(this), this.handleNav = function(a) {
                    void 0 !== a && a.stopPropagation(), this.navOpen ? (this.navOpen = !1, this.closeNav()) : (this.navOpen = !0, 
                    this.openNav());
                }.bind(this), this.handleOverlay = function() {
                    if (this.navOpen) this.navOpen = !1, this.closeNav(); else {
                        if (!this.filterOpen) return !1;
                        this.filterOpen = !1, this.closeFilter();
                    }
                }.bind(this), this.initialize();
            };
            return a;
        }();
        b.exports = c;
    }, {} ],
    5: [ function(a, b) {
        var c = function(a) {
            var b = function(b, c) {
                this.el = b, this.$el = $(b), this.$items = this.$el.find(".link-item"), this.items = [], 
                this.animations = [], this.scrollTimer = null, this.shouldCenter = !0, this.userScrolling = !0, 
                this.extendHeight = 0, $.extend(this, c), this.transitionInComplete = this.transitionInComplete || function() {}, 
                void 0 === this.disableWidth && (this.disableWidth = 767), this.initialize = function() {
                    this.initItems();
                    var b = a.matchMedia("(max-width: " + this.disableWidth + "px)");
                    b.addListener(this.checkMediaQuery), this.checkMediaQuery(b);
                }, this.events = function(a) {
                    a ? this.$items.on("click", this.open) : (this.$items.off("click", this.open), $(".linksList-desktop li.link-item.inactive").on("click", this.flipIn));
                }, a.onresize = function() {
                    this.initItems();
                }.bind(this), this.checkMediaQuery = function(a) {
                    a.matches || this.disabled ? (this.disabled = !1, this.enable()) : (this.disabled = !0, 
                    this.disable());
                }.bind(this), this.enable = function() {
                    this.events(!0);
                }, this.disable = function() {
                    this.events(!1);
                }, this.generateAnimation = function(a) {
                    var b = new TimelineMax(), c = TweenMax.to(a, .5, {
                        height: a.find(".content").height() + 75,
                        ease: Cubic.easeInOut
                    });
                    return b.add([ c ]), b.paused(!0), b;
                }, this.initItems = function() {
                    var a = this;
                    this.$items.each(function(b, c) {
                        var d = $(c);
                        a.items.push({
                            id: d.attr("id"),
                            height: d.find(".content").height(),
                            order: b,
                            $el: d,
                            transition: a.generateAnimation(d)
                        });
                    });
                }, this.open = function(a) {
                    var b = $(a.target).closest(".link-item"), c = b.attr("id");
                    for (var d in this.items) {
                        var e = this.items[d];
                        c === e.id ? e.open ? (e.transition.reverse(), e.open = !1, e.$el.removeClass("open")) : (e.transition.play(), 
                        e.open = !0, e.$el.addClass("open")) : (e.transition.reverse(), e.open = !1, e.$el.removeClass("open"));
                    }
                }.bind(this), this.flipIn = function(a) {
                    var b = $(a.target).data("index");
                    console.log("index: ", b), $("ul.linksList-desktop li.active").removeClass("active").addClass("inactive"), 
                    $(a.target).addClass("active"), TweenMax.to($("ul.linksList li.active"), .75, {
                        y: 100,
                        z: -20,
                        alpha: 0,
                        rotationX: -90,
                        ease: Cubic.easeInOut,
                        onComplete: function() {
                            TweenMax.set($("ul.linksList li.active"), {
                                rotationX: 90,
                                y: -100
                            }), $("ul.linksList li.active").removeClass("active").addClass("inactive");
                        }
                    }), TweenMax.to($("ul.linksList li.link-item").eq(b), .75, {
                        delay: .1,
                        y: 0,
                        z: 0,
                        alpha: 1,
                        rotationX: 0,
                        ease: Cubic.easeInOut,
                        onComplete: function() {
                            $("ul.linksList li.link-item").eq(b).removeClass("inactive").addClass("active");
                        }
                    });
                }.bind(this), this.initialize();
            };
            return b;
        }(window);
        b.exports = window.cl.LinksList = c;
    }, {} ],
    6: [ function(a, b) {
        var c = function() {
            var a = function(a) {
                function b(a) {
                    console.error(a);
                }
                return $.extend(this, a), this.transitionInComplete = this.transitionInComplete || function() {}, 
                0 === this.$el.length ? b("No Element") : void 0 === this.$el ? b("No $el property has been passed in the options") : (this.initialize = function() {
                    this.transitionIn();
                }, this.transitionIn = function() {
                    var a = new TimelineMax({
                        onComplete: this.transitionInComplete
                    }), b = [];
                    this.$tiles.each(function(a) {
                        var c = a % 2 === 0 ? 1 : -1, d = c > 0 ? "center top" : "center bottom", e = new TimelineMax(), f = $(this).height(), g = TweenMax.fromTo(this, 2, {
                            transformPerspective: 1e3,
                            transformOrigin: d,
                            rotationX: 90 * c,
                            z: -f
                        }, {
                            rotationX: 0,
                            ease: Power4.easeOut,
                            z: 0
                        });
                        e.add([ g ]), b.push(e);
                    }), a.add(b, "-=0", "normal", .15);
                }, this.$tiles = this.$el.find(".tile"), console.log(this), void this.initialize());
            };
            return a;
        }(window);
        b.exports = c;
    }, {} ],
    7: [ function(a, b) {
        var c = function() {
            var a = function(a) {
                function b(a) {
                    console.error(a);
                }
                return $.extend(this, a), this.transitionInComplete = this.transitionInComplete || function() {}, 
                this.videoLoaded = !1, this.id = Math.round(1e4 * Math.random()), this.type = "autoplay", 
                void 0 === this.$el ? b(0 === this.$el.length ? "No Video Element" : "No $el property has been passed in the options") : (this.isMobile = $("html").hasClass("mobile"), 
                this.isTablet = $("html").hasClass("tablet"), this.initialize = function() {
                    this.detectVideo() && this.deviceDetection();
                }, this.initVideo = function() {
                    this.video = this.$video.find("video")[0], this.video.readyState > 0 ? this.videoMetadata() : (this.video.addEventListener("loadeddata", this.videoMetadata), 
                    this.video.addEventListener("loadedmetadata", this.videoMetadata)), window.cl.players[this.id] = this;
                }, this.videoMetadata = function() {
                    this.video.removeEventListener("loadeddata", this.videoMetadata), this.video.removeEventListener("loadedmetadata", this.videoMetadata), 
                    this.videoLoaded === !1 && (this.videoLoaded = !0, this.initVideoRegistration());
                }.bind(this), this.initVideoRegistration = function() {
                    this.videoRatio = this.video.videoWidth / this.video.videoHeight, $(window).resize(this.resizeVideo), 
                    this.resizeVideo();
                }, this.resizeVideo = function() {
                    var a = this.$video.width(), b = this.$video.height(), c = a / b;
                    c > this.videoRatio ? (this.video.style.width = "100%", this.video.style.height = "auto") : (this.video.style.width = "auto", 
                    this.video.style.height = "100%");
                }.bind(this), this.detectVideo = function() {
                    return this.$video.find("video").length > 0 ? !0 : this.removeVideo();
                }, this.deviceDetection = function() {
                    this.isMobile || this.isTablet ? this.removeVideo() : this.initVideo();
                }, this.removeVideo = function() {
                    return this.$video.remove(), this.$image.show(), !1;
                }, this.pause = this.stop = function() {
                    void 0 !== this.video && this.video.pause();
                }, this.play = function() {
                    void 0 !== this.video && this.video.play();
                }, this.$video = this.$el.find("[data-panel-video]"), this.$image = this.$el.find("[data-panel-image]"), 
                void this.initialize());
            };
            return a;
        }(window);
        b.exports = c;
    }, {} ],
    8: [ function(a, b) {
        var c = a("./videoservices"), d = function() {
            var a = function(a, b) {
                var d = this;
                this.$el = $(a), this.id = this.$el.attr("id"), this.player = null, this.playerActive = !1, 
                $.extend(this, b), this.isMobile = $("html").hasClass("mobile"), this.isTablet = $("html").hasClass("tablet"), 
                this.initialize = function() {
                    this.embedCode = this.$el.data("iframe-embed"), this.$iframe = $('<iframe src="' + this.embedCode + '" width="100%" height="100%" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen />'), 
                    this.$cover = this.$el.nextAll().filter("[data-panel-image] , [data-panel-play-button]"), 
                    this.$cover.show(), this.iframe = this.$iframe[0], this.addEvents();
                }, this.loadVimeoPanel = function() {
                    c.stopAll(null, d.id), d.playerActive === !0 && null !== d.player ? d.player.api("play") : (d.$iframe.load(function() {
                        d.playerActive = !0, d.player = $f(d.iframe), console.log(d.player, d.id), d.player.addEvent("ready", function() {
                            d.player.removeEvent("ready"), d.player.addEvent("pause", d.onVideoPause), d.player.addEvent("play", d.onVideoPlay);
                        });
                    }), d.$el.empty(), d.$el.append(d.$iframe));
                }, this.unloadVimeoPanel = function() {
                    d.player.removeEvent("play"), d.player.removeEvent("pause"), d.transitionCover(!0), 
                    d.playerActive = !1, d.player = null, d.$el.empty();
                }, this.addEvents = function() {
                    d.$cover.filter("[data-panel-play-button]").on("click", d.onClickCover);
                }, this.unloadPanel = function() {
                    switch (d.type) {
                      case "vimeo":
                        d.unloadVimeoPanel();
                    }
                }, this.loadPanel = function() {
                    switch (d.type) {
                      case "vimeo":
                        d.loadVimeoPanel();
                    }
                }, this.onVideoPause = function() {
                    console.log("pause"), c.playAll("autoplay"), d.transitionCover(!0);
                }, this.onVideoPlay = function() {
                    console.log("play"), d.transitionCover();
                }, this.onClickCover = function() {
                    d.$el.show(), d.transitionCover(!1, d.loadPanel), console.log("click cover", d.id);
                }, this.transitionCover = function(a, b) {
                    var c = b, e = {
                        scaleY: .8,
                        scaleX: .8,
                        autoAlpha: 0
                    };
                    void 0 !== c && (e.onComplete = function() {
                        console.log("oncomplete", d.id), b();
                    }), a && (e.scaleY = 1, e.scaleX = 1, e.autoAlpha = 1), TweenMax.to(d.$cover, .5, e);
                }, this.play = function() {
                    switch (d.type) {
                      case "vimeo":
                        null !== d.player && d.player.api("play");
                    }
                }, this.pause = function() {
                    switch (d.type) {
                      case "vimeo":
                        null !== d.player && d.player.api("pause");
                    }
                }, this.stop = function() {
                    null !== d.player && d.unloadPanel();
                }, this.show = function() {}, this.hide = function() {}, this.destroy = function() {
                    this.stop(), this.$cover.filter("[data-panel-play-button]").off("click", this.onClickCover);
                }, this.initialize();
            };
            return a;
        }(window);
        b.exports = d;
    }, {
        "./videoservices": 9
    } ],
    9: [ function(a, b) {
        VideoComponent = a("./videoservicecomponent.js"), b.exports.gatherVimeoPlayers = function() {
            $("[data-vimeo]").each(function() {
                var a = new VideoComponent(this, {
                    type: "vimeo"
                });
                window.cl.players[$(this).attr("id")] = a;
            });
        };
        var c = function(a, b, c) {
            var d = window.cl.players;
            for (var e in d) {
                var f = d[e];
                f.type !== a && void 0 !== a && null !== a || f.id === b && void 0 !== b && null !== b || ("stop" === c ? f.playerActive === !0 && f[c]() : f[c]());
            }
        };
        b.exports.pauseAll = function(a, b) {
            c(a, b, "pause");
        }, b.exports.playAll = function(a, b) {
            c(a, b, "play");
        }, b.exports.stopAll = function(a, b) {
            c(a, b, "stop");
        };
    }, {
        "./videoservicecomponent.js": 8
    } ],
    10: [ function(a, b) {
        var c = a("./components/header"), d = a("./components/videopanel"), e = a("./components/tiles"), f = a("./components/gallery"), g = a("./components/linksList"), h = a("./components/accordion"), i = a("./components/videoservices"), j = function() {
            new c({
                button: "#menu",
                overlay: "nav",
                filterMenu: "#filter-menu",
                filterButton: "#filter",
                activeClass: ".active-state",
                affectedClass: ".flip-button"
            });
        }, k = function() {
            new g(".linksList", {
                disableWidth: 767
            });
        }, l = function() {
            $(".gallery-container").each(function() {
                new f({
                    $el: $(this)
                });
            });
        }, m = function() {
            $("[data-video-panel]").each(function() {
                new d({
                    $el: $(this)
                });
            });
        }, n = function() {
            i.gatherVimeoPlayers();
        }, o = function() {
            $("[data-accordion]").each(function() {
                new h(this, {
                    expandHeight: 400,
                    compressedHeight: 375,
                    enableWidth: 768
                });
            });
        }, p = function() {
            $(".tiles-container").each(function() {
                new e({
                    $el: $(this)
                });
            });
        };
        b.exports.initGlobal = function() {
            j(), m(), l(), k(), o(), p(), n();
        };
    }, {
        "./components/accordion": 2,
        "./components/gallery": 3,
        "./components/header": 4,
        "./components/linksList": 5,
        "./components/tiles": 6,
        "./components/videopanel": 7,
        "./components/videoservices": 9
    } ],
    11: [ function(a) {
        window.cl = {}, window.cl.players = {}, a("./carmichaellynch/components/gallery"), 
        a("./carmichaellynch/components/accordion"), a("./carmichaellynch/components/linksList");
        var b = a("./carmichaellynch/app");
        $(document).ready(function() {
            new b();
        });
    }, {
        "./carmichaellynch/app": 1,
        "./carmichaellynch/components/accordion": 2,
        "./carmichaellynch/components/gallery": 3,
        "./carmichaellynch/components/linksList": 5
    } ]
}, {}, [ 11 ]);